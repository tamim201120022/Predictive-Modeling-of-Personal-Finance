# -*- coding: utf-8 -*-
"""Linear Regression Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1stQ3jwQNnu-QGSpXWGdZGEElqOz5Iv7g

## Import Module
"""

from statistics import linear_regression
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn import preprocessing
import seaborn as sns
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.multiclass import OneVsRestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.multiclass import OneVsRestClassifier
from sklearn.metrics import accuracy_score
import numpy as np
import pandas as pd

data=pd.read_csv('New Dataset.csv')

data.info()   ## Checking data information

data.isnull().sum() ## Checking in data wheather it has null value or not

data.describe()

data.isnull().sum() ## Checking in data wheather it has null value or not

data.dropna()  ## Drop the null value from the data

data.nunique()  ## Checking how many unique value has in all those column

data.head()   ## Print top 5 rows of dataset

print(data.columns) ## Print all the column name of dataset



data.describe()

features = ['Name','Age','Gender','Profession','Income','Savings','Assets']   ## initializing feature into one varible
target = ['Expense','Average cost for vehicle','Medical','Average cost for food','Others'] ## initializing target into one varible

data['Name'] = data['Name'].astype('category')  ## convert data type object to category
data['Name_cat'] = data['Name'].cat.codes
features.append('Name_cat')

data[' Gender'] = data[' Gender'].astype('category') ## convert data type object to category
data['Gender_cat'] = data[' Gender'].cat.codes
features.append('Gender_cat')

data[' Gender'] = data[' Gender'].astype('category') ## convert data type object to category
data['Gender_cat'] = data[' Gender'].cat.codes
features.append('Gender_cat')

data[' Age'] = data[' Age'].astype(int) ## convert data type object to int

data[' Profession'] = data[' Profession'].astype('category') ## convert data type object to category
data['Profession_cat'] = data[' Profession'].cat.codes
features.append('Profession_cat')

data[' Income'] = data[' Income'].replace('', np.nan)  ## replace all empty value into nan value

# Convert the column to integers
data[' Income'] = data[' Income'].astype(float).astype(pd.Int64Dtype())  ## convert data type object to flaot

features = ['Gender_cat','Profession_cat', ' Age',' Income',' Savings',' Assets']
target = [' Expense','Average cost for vehicle','Medical','Average cost for food','Others']

from sklearn.model_selection import train_test_split   ## import module train test split
X= data[features]  ## initializing the x with feature
y=data[target]   ## initializing the y with feature
X.dropna()     ## Drop null value from X

data.head()  ## Print top 5 rows of dataset

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)   ## initializing train test split into 4 variable

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=0) ## initializing train test split into 4 variable

X_train ## Print X train dataset

y_train   ## Print y train dataset

from sklearn.linear_model import LinearRegression  ## Import LinearRegression model

lineatregression = LinearRegression() ## model creation

lineatregression.fit(X_train,y_train)  ## Fir all the training data into model


# y_pred = lineatregression.predict(X_train)  ## Predict X training data
y_pred = lineatregression.predict(X_test)

y_pred

lineatregression.score(X_test,y_pred)  ## Model accuracy score

"""## Input- Age , Gender , Profession, Income , Saveing, Assets

## Output- Total Expense , Average cost for vehicle , Medical , Average cost for food , Others
"""

X_new = np.array([30, 1, 7, 60000, 13000, 100000]).reshape(1, -1)  ## Cheking model through new input

y_pred = lineatregression.predict(X_new)
# Print the predictions
print("Predicted values:", y_pred) ## Print the prediction value


